/* tslint:disable:no-shadowed-variable */
/* tslint:disable:prefer-const */
/* tslint:disable:object-literal-sort-keys */
/* tslint:disable:no-empty */

// Created using https://app.quicktype.io/ based on the networks.js contents
// generated by Cytoscape 3.7.1 using File -> Export -> Export to Web Page...
//
// To parse this data:
//
//   import { Convert, Network } from "./cytoscapeJsNetwork";
//
//   const network: Network = Convert.toNetwork(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.

import { EdgeDataDefinition, NodeDataDefinition } from "cytoscape";

export interface NetworksJs {
  [k: string]: Network;
}

export interface Network {
  format_version: string;
  generated_by: string;
  target_cytoscapejs_version: string;
  data: NetworkData;
  elements: Elements;
}

export interface NetworkData {
  shared_name: string;
  name: string;
  SUID: number;
  __Annotations: string[];
  selected: boolean;
}

export interface Elements {
  nodes: Node[];
  edges: Edge[];
}

export interface Edge {
  data: EdgeData;
  selected?: boolean;
}

export interface EdgeData extends EdgeDataDefinition {
  id: string;
  source: string;
  target: string;
  shared_name?: string;
  shared_interaction?: string;
  name?: string;
  interaction: string;
  selected?: boolean;
}

export interface Node {
  data: NodeData;
  position: Position;
  selected?: boolean;
}

export interface NodeData extends NodeDataDefinition {
  id: string;
  shared_name?: string;
  name?: string;
  selected?: boolean;
}

export interface Position {
  x: number;
  y: number;
}

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
export class Convert {
  public static toNetwork(json: string): Network {
    return cast(JSON.parse(json), r("Network"));
  }

  public static networkToJson(value: Network): string {
    return JSON.stringify(uncast(value, r("Network")), null, 2);
  }
}

function invalidValue(typ: any, val: any): never {
  throw Error(
    `Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,
  );
}

function jsonToJSProps(typ: any): any {
  if (typ.jsonToJS === undefined) {
    let map: any = {};
    typ.props.forEach((p: any) => (map[p.json] = { key: p.js, typ: p.typ }));
    typ.jsonToJS = map;
  }
  return typ.jsonToJS;
}

function jsToJSONProps(typ: any): any {
  if (typ.jsToJSON === undefined) {
    let map: any = {};
    typ.props.forEach((p: any) => (map[p.js] = { key: p.json, typ: p.typ }));
    typ.jsToJSON = map;
  }
  return typ.jsToJSON;
}

function transform(val: any, typ: any, getProps: any): any {
  function transformPrimitive(typ: string, val: any): any {
    if (typeof typ === typeof val || typ === "_any_") {
      return val;
    }
    return invalidValue(typ, val);
  }

  function transformUnion(typs: any[], val: any): any {
    // val must validate against one typ in typs
    let l = typs.length;
    for (let i = 0; i < l; i++) {
      let typ = typs[i];
      try {
        return transform(val, typ, getProps);
      } catch (_) {}
    }
    return invalidValue(typs, val);
  }

  function transformEnum(cases: string[], val: any): any {
    if (cases.indexOf(val) !== -1) {
      return val;
    }
    return invalidValue(cases, val);
  }

  function transformArray(typ: any, val: any): any {
    // val must be an array with no invalid elements
    if (!Array.isArray(val)) {
      return invalidValue("array", val);
    }
    return val.map(el => transform(el, typ, getProps));
  }

  function transformDate(_typ: any, val: any): any {
    if (val === null) {
      return null;
    }
    const d = new Date(val);
    if (isNaN(d.valueOf())) {
      return invalidValue("Date", val);
    }
    return d;
  }

  function transformObject(
    props: { [k: string]: any },
    additional: any,
    val: any,
  ): any {
    if (val === null || typeof val !== "object" || Array.isArray(val)) {
      return invalidValue("object", val);
    }
    let result: any = {};
    Object.getOwnPropertyNames(props).forEach(key => {
      const prop = props[key];
      const v = Object.prototype.hasOwnProperty.call(val, key)
        ? val[key]
        : undefined;
      result[prop.key] = transform(v, prop.typ, getProps);
    });
    Object.getOwnPropertyNames(val).forEach(key => {
      if (!Object.prototype.hasOwnProperty.call(props, key)) {
        result[key] = transform(val[key], additional, getProps);
      }
    });
    return result;
  }

  if (typ === "any") {
    return val;
  }
  if (typ === null) {
    if (val === null) {
      return val;
    }
    return invalidValue(typ, val);
  }
  if (typ === false) {
    return invalidValue(typ, val);
  }
  while (typeof typ === "object" && typ.ref !== undefined) {
    typ = typeMap[typ.ref];
  }
  if (Array.isArray(typ)) {
    return transformEnum(typ, val);
  }
  if (typeof typ === "object") {
    return typ.hasOwnProperty("unionMembers")
      ? transformUnion(typ.unionMembers, val)
      : typ.hasOwnProperty("arrayItems")
      ? transformArray(typ.arrayItems, val)
      : typ.hasOwnProperty("props")
      ? transformObject(getProps(typ), typ.additional, val)
      : invalidValue(typ, val);
  }
  // Numbers can be parsed by Date but shouldn't be.
  if (typ === Date && typeof val !== "number") {
    return transformDate(typ, val);
  }
  return transformPrimitive(typ, val);
}

function cast<T>(val: any, typ: any): T {
  return transform(val, typ, jsonToJSProps);
}

function uncast<T>(val: T, typ: any): any {
  return transform(val, typ, jsToJSONProps);
}

function a(typ: any) {
  return { arrayItems: typ };
}

/*
function u(...typs: any[]) {
  return { unionMembers: typs };
}
 */

function o(props: any[], additional: any) {
  return { props, additional };
}

function r(name: string) {
  return { ref: name };
}

const typeMap: any = {
  NetworksJs: o([], r("Network")),
  Network: o(
    [
      { json: "format_version", js: "format_version", typ: "" },
      { json: "generated_by", js: "generated_by", typ: "" },
      {
        json: "target_cytoscapejs_version",
        js: "target_cytoscapejs_version",
        typ: "",
      },
      { json: "data", js: "data", typ: r("NetworkData") },
      { json: "elements", js: "elements", typ: r("Elements") },
    ],
    false,
  ),
  NetworkData: o(
    [
      { json: "shared_name", js: "shared_name", typ: "" },
      { json: "name", js: "name", typ: "" },
      { json: "SUID", js: "SUID", typ: 0 },
      { json: "__Annotations", js: "__Annotations", typ: a("") },
      { json: "selected", js: "selected", typ: true },
    ],
    "_any_",
  ),
  Elements: o(
    [
      { json: "nodes", js: "nodes", typ: a(r("Node")) },
      { json: "edges", js: "edges", typ: a(r("Edge")) },
    ],
    false,
  ),
  Edge: o(
    [
      { json: "data", js: "data", typ: r("EdgeData") },
      { json: "selected", js: "selected", typ: true },
    ],
    false,
  ),
  EdgeData: o(
    [
      { json: "id", js: "id", typ: "" },
      { json: "source", js: "source", typ: "" },
      { json: "target", js: "target", typ: "" },
      { json: "shared_name", js: "shared_name", typ: "" },
      { json: "shared_interaction", js: "shared_interaction", typ: "" },
      { json: "name", js: "name", typ: "" },
      { json: "interaction", js: "interaction", typ: "" },
      { json: "selected", js: "selected", typ: true },
    ],
    "_any_",
  ),
  Node: o(
    [
      { json: "data", js: "data", typ: r("NodeData") },
      { json: "position", js: "position", typ: r("Position") },
      { json: "selected", js: "selected", typ: true },
    ],
    false,
  ),
  NodeData: o(
    [
      { json: "id", js: "id", typ: "" },
      { json: "shared_name", js: "shared_name", typ: "" },
      { json: "name", js: "name", typ: "" },
      { json: "selected", js: "selected", typ: true },
    ],
    "_any_",
  ),
  Position: o(
    [{ json: "x", js: "x", typ: 3.14 }, { json: "y", js: "y", typ: 3.14 }],
    false,
  ),
};
